/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/focus-visible/dist/focus-visible.js":
/*!**********************************************************!*\
  !*** ./node_modules/focus-visible/dist/focus-visible.js ***!
  \**********************************************************/
/***/ (function() {

eval("(function (global, factory) {\n   true ? factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n\n    var inputTypesAllowlist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n    function isValidFocusTarget(el) {\n      if (\n        el &&\n        el !== document &&\n        el.nodeName !== 'HTML' &&\n        el.nodeName !== 'BODY' &&\n        'classList' in el &&\n        'contains' in el.classList\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName === 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (\n        e.target.classList.contains('focus-visible') ||\n        e.target.hasAttribute('data-focus-visible-added')\n      ) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n          hadFocusVisibleRecently = false;\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n    function onVisibilityChange(e) {\n      if (document.visibilityState === 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n        addInitialPointerMoveListeners();\n      }\n    }\n\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    }\n\n    // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n\n    addInitialPointerMoveListeners();\n\n    // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true);\n\n    // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n      document.documentElement.setAttribute('data-js-focus-visible', '');\n    }\n  }\n\n  // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\n\n    // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n\n})));\n\n\n//# sourceURL=webpack://gulp-builder/./node_modules/focus-visible/dist/focus-visible.js?");

/***/ }),

/***/ "./src/js/_settings.js":
/*!*****************************!*\
  !*** ./src/js/_settings.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nArray.prototype.last = function () {\n    return this[this.length - 1];\n}\n\n//# sourceURL=webpack://gulp-builder/./src/js/_settings.js?");

/***/ }),

/***/ "./src/js/functions/fix-fullheight.js":
/*!********************************************!*\
  !*** ./src/js/functions/fix-fullheight.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _throttle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./throttle.js */ \"./src/js/functions/throttle.js\");\n\nconst fixFullheight = () => {\n  let vh = window.innerHeight;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n};\n\nlet fixHeight = (0,_throttle_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(fixFullheight);\n\nfixHeight();\n\nwindow.addEventListener('resize', fixHeight);\n\n//# sourceURL=webpack://gulp-builder/./src/js/functions/fix-fullheight.js?");

/***/ }),

/***/ "./src/js/functions/spollers.js":
/*!**************************************!*\
  !*** ./src/js/functions/spollers.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WdSpoller)\n/* harmony export */ });\n/* harmony import */ var _modules_slide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/slide.js */ \"./src/js/modules/slide.js\");\n\n\nfunction WdSpoller(element) {\n    if (!element) return;\n    element.wdSpoller = new Spoller(element);\n}\n\nclass Spoller {\n    constructor(element) {\n        this.element = element;\n        if (!this.element) return;\n        this.items = element.querySelectorAll('[data-spollers-item]');\n        this.animation = this.element.dataset.spollersAnimation || 'default';\n        this.mode = this.element.dataset.spollersMode || 'default';\n        this.speed = this.element.dataset.spollersSpeed || 300;\n        this.isActive = false;\n\n        this.init();\n\n        this.attributeNames = {\n            item: 'data-spollers-item',\n            button: 'data-spollers-btn',\n            body: 'data-spollers-body'\n        }\n    }\n\n    init() {\n        this.element.addEventListener('click', this.change.bind(this));\n    }\n\n    change(e) {\n        const target = e.target;\n        const button = target.closest(`[${this.attributeNames.button}]`);\n        if (button) {\n            const currentItem = button.closest(`[${this.attributeNames.item}]`);\n            this.toggleItem(currentItem);\n        }\n    }\n\n\n    toggleItem(currentItem) {\n        const body = this.getItemBody(currentItem);\n        if (body.classList.contains('_slide')) return;\n\n        if (this.mode === 'one') {\n            Array.from(this.items).filter(item => currentItem !== item).forEach(item => {\n                this.close(item);\n            });\n        }\n\n        this.toggle(currentItem);\n    }\n\n    open() {\n\n    }\n\n    close(item) {\n        const body = this.getItemBody(item);\n        item.classList.remove('_active');\n        item.querySelector(`[${this.attributeNames.button}]`).classList.remove('_active');\n        if (this.animation === 'display') {\n            (0,_modules_slide_js__WEBPACK_IMPORTED_MODULE_0__._displayFadeUp)(body, this.speed);\n            return\n        }\n        (0,_modules_slide_js__WEBPACK_IMPORTED_MODULE_0__._slideUp)(body, this.speed);\n    }\n\n    toggle(item) {\n        const body = this.getItemBody(item);\n        item.querySelector(`[${this.attributeNames.button}]`).classList.toggle('_active');\n        item.classList.toggle('_active');\n        if (this.animation === 'display') {\n            (0,_modules_slide_js__WEBPACK_IMPORTED_MODULE_0__._displayFadeToggle)(body, this.speed);\n            return\n        }\n        (0,_modules_slide_js__WEBPACK_IMPORTED_MODULE_0__._slideToggle)(body, this.speed);\n    }\n\n    getItemBody(item) {\n        return item.querySelector(`[${this.attributeNames.body}]`);\n    }\n}\n\n\n\n//# sourceURL=webpack://gulp-builder/./src/js/functions/spollers.js?");

/***/ }),

/***/ "./src/js/functions/tabs.js":
/*!**********************************!*\
  !*** ./src/js/functions/tabs.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WdTab)\n/* harmony export */ });\n/* harmony import */ var _modules_slide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/slide.js */ \"./src/js/modules/slide.js\");\n\n\nfunction WdTab(element) {\n    if (!element) return;\n    element.wdTab = new Tabs(element);\n}\n\nclass Tabs {\n    constructor(container) {\n        this.container = container;\n        this.buttonsList = this.container.querySelector('[data-tabs-buttons]');\n        this.content = this.container.querySelector('[data-tabs-content]');\n        this.buttons = Array.from(this.buttonsList.children);\n        this.panels = Array.from(this.content.children);\n        this.animation = this.container.dataset.tabsAnimation || null;\n\n        this.activeTab = null;\n\n        if (this.buttons.length !== this.panels.length) {\n            this.errorLength();\n            return;\n        }\n\n        this.init();\n    }\n\n    init() {\n        this.setIndex();\n        this.container.classList.add('_init-tab');\n\n        this.activeTab = this.buttons.find(button => button.classList.contains('_active')) || null;\n\n        if (this.activeTab) {\n            this.setTab(this.getIndexButton(this.activeTab));\n        } else {\n            this.setTab(0);\n        }\n\n        this.buttonsList.addEventListener('click', (e) => {\n            const target = e.target;\n            const button = target.closest('[data-tabs-button-index]');\n            if (!button) return;\n            const index = this.getIndexButton(button);\n            this.setTab(index)\n        })\n    }\n\n    setIndex() {\n        this.buttons.forEach(setIndexButtons);\n        this.panels.forEach(setIndexPanels);\n\n        function setIndexButtons(button, index) {\n            button.setAttribute('data-tabs-button-index', index);\n        }\n\n        function setIndexPanels(panel, index) {\n            panel.setAttribute('data-tabs-panel-index', index);\n        }\n    }\n\n    setTab(index) {\n        const button = this.buttons.find(button => this.getIndexButton(button) == index);\n        const panel = this.panels.find(panel => this.getIndexPanel(panel) == index);\n        if (!button || !panel) return;\n        if (button.classList.contains('_active')) return;\n        this.clearTabs();\n\n        this.activeTab = button;\n\n        button.classList.add('_active');\n        if (this.animation === 'fade') {\n            (0,_modules_slide_js__WEBPACK_IMPORTED_MODULE_0__._displayFadeDown)(panel, 500);\n        } else {\n            panel.removeAttribute('hidden');\n        }\n    }\n\n    clearTabs() {\n        this.activeTab = null;\n        this.buttons.forEach(button => button.classList.remove('_active'));\n        this.panels.forEach(panel => panel.setAttribute('hidden', ''));\n    }\n\n    getIndexButton(button) {\n        if (!button) return;\n        return button.dataset.tabsButtonIndex;\n    }\n\n    getIndexPanel(panel) {\n        if (!panel) return;\n        return panel.dataset.tabsPanelIndex;\n    }\n\n    errorLength() {\n        console.error(`У класса Tab количество кнопок и панелей не равно!`, this);\n    }\n\n}\n\n\n\n\n\n\n//# sourceURL=webpack://gulp-builder/./src/js/functions/tabs.js?");

/***/ }),

/***/ "./src/js/functions/throttle.js":
/*!**************************************!*\
  !*** ./src/js/functions/throttle.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst throttle = (callback, delay = 250) => {\n    let isThrottled = false;\n    let savedArgs = null;\n    let savedThis = null;\n\n    return function wrap(...args) {\n        if (isThrottled) {\n            savedArgs = args;\n            savedThis = this;\n            return;\n        }\n\n        callback.apply(this, args);\n        isThrottled = true;\n\n        setTimeout(() => {\n            isThrottled = false;\n\n            if (savedThis) {\n                wrap.apply(savedThis, savedArgs);\n                savedThis = null;\n                savedArgs = null;\n            }\n\n        }, delay);\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (throttle);\n\n\n// function callback() {\n//     console.log('resize');\n// }\n\n// window.addEventListener('resize', throttle(callback, 500));\n\n//# sourceURL=webpack://gulp-builder/./src/js/functions/throttle.js?");

/***/ }),

/***/ "./src/js/global.js":
/*!**************************!*\
  !*** ./src/js/global.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var focus_visible__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! focus-visible */ \"./node_modules/focus-visible/dist/focus-visible.js\");\n/* harmony import */ var _functions_fix_fullheight_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions/fix-fullheight.js */ \"./src/js/functions/fix-fullheight.js\");\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_settings.js */ \"./src/js/_settings.js\");\n/* harmony import */ var _functions_tabs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functions/tabs.js */ \"./src/js/functions/tabs.js\");\n/* harmony import */ var _functions_spollers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functions/spollers.js */ \"./src/js/functions/spollers.js\");\n\n\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    document.addEventListener('click', (e) => {\n        const target = e.target;\n    })\n\n    const tabs = document.querySelectorAll('[data-tabs]');\n    tabs.forEach(tab => (0,_functions_tabs_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(tab));\n\n    const spollers = document.querySelectorAll('[data-spollers]');\nspollers.forEach(spoller => (0,_functions_spollers_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(spoller));\n\n});\n\n//# sourceURL=webpack://gulp-builder/./src/js/global.js?");

/***/ }),

/***/ "./src/js/modules/slide.js":
/*!*********************************!*\
  !*** ./src/js/modules/slide.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _displayFadeDown: () => (/* binding */ _displayFadeDown),\n/* harmony export */   _displayFadeToggle: () => (/* binding */ _displayFadeToggle),\n/* harmony export */   _displayFadeUp: () => (/* binding */ _displayFadeUp),\n/* harmony export */   _slideDown: () => (/* binding */ _slideDown),\n/* harmony export */   _slideToggle: () => (/* binding */ _slideToggle),\n/* harmony export */   _slideUp: () => (/* binding */ _slideUp)\n/* harmony export */ });\nconst _slideUp = (target, duration = 500, showmore = 0) => {\n    if (!target.classList.contains('_slide')) {\n        target.classList.add('_slide');\n        target.style.transitionProperty = 'height, margin, padding, opacity';\n        target.style.transitionDuration = duration + 'ms';\n        target.style.height = `${target.offsetHeight}px`;\n        target.offsetHeight;\n        target.style.overflow = 'hidden';\n        target.style.opacity = 0;\n        target.style.height = showmore ? `${showmore}px` : `0px`;\n        target.style.paddingTop = 0;\n        target.style.paddingBottom = 0;\n        target.style.marginTop = 0;\n        target.style.marginBottom = 0;\n        window.setTimeout(() => {\n            target.hidden = !showmore ? true : false;\n            !showmore ? target.style.removeProperty('height') : null;\n            target.style.removeProperty('padding-top');\n            target.style.removeProperty('padding-bottom');\n            target.style.removeProperty('margin-top');\n            target.style.removeProperty('margin-bottom');\n            target.style.removeProperty('opacity');\n            !showmore ? target.style.removeProperty('overflow') : null;\n            target.style.removeProperty('transition-duration');\n            target.style.removeProperty('transition-property');\n            target.classList.remove('_slide');\n\n            document.dispatchEvent(new CustomEvent(\"slideUpDone\", {\n                detail: {\n                    target: target\n                }\n            }));\n        }, duration);\n    }\n}\n\nconst _slideDown = (target, duration = 500, showmore = 0) => {\n    if (!target.classList.contains('_slide')) {\n        target.classList.add('_slide');\n        target.hidden = target.hidden ? false : null;\n        showmore ? target.style.removeProperty('height') : null;\n        let height = target.offsetHeight;\n        target.style.overflow = 'hidden';\n        target.style.opacity = 0;\n        target.style.height = showmore ? `${showmore}px` : `0px`;\n        target.style.paddingTop = 0;\n        target.style.paddingBottom = 0;\n        target.style.marginTop = 0;\n        target.style.marginBottom = 0;\n        target.offsetHeight;\n        target.style.transitionProperty = \"height, margin, padding, opacity\";\n        target.style.transitionDuration = duration + 'ms';\n        target.style.height = height + 'px';\n        target.style.removeProperty('padding-top');\n        target.style.removeProperty('padding-bottom');\n        target.style.removeProperty('margin-top');\n        target.style.removeProperty('margin-bottom');\n        target.style.removeProperty('opacity');\n        window.setTimeout(() => {\n            target.style.removeProperty('height');\n            target.style.removeProperty('overflow');\n            target.style.removeProperty('transition-duration');\n            target.style.removeProperty('transition-property');\n            target.classList.remove('_slide');\n\n            document.dispatchEvent(new CustomEvent(\"slideDownDone\", {\n                detail: {\n                    target: target\n                }\n            }));\n        }, duration);\n    }\n}\n\nconst _slideToggle = (target, duration = 500) => {\n    if (target.hidden) {\n        return _slideDown(target, duration);\n    } else {\n        return _slideUp(target, duration);\n    }\n}\n\n\n\nconst _displayFadeUp = (target, duration = 500, showmore = 0) => {\n    if (!target.classList.contains('_slide')) {\n        target.classList.add('_slide');\n        target.style.transitionProperty = 'opacity';\n        target.style.transitionDuration = duration + 'ms';\n        target.style.opacity = 1;\n        setTimeout(() => {\n            target.style.opacity = 0;\n        }, 0);\n        setTimeout(() => {\n            target.hidden = !showmore ? true : false;\n            target.style.removeProperty('transition-duration');\n            target.style.removeProperty('transition-property');\n            target.style.removeProperty('opacity');\n            target.classList.remove('_slide');\n        }, duration);\n    }\n};\n\nconst _displayFadeDown = (target, duration = 500, showmore = 0) => {\n    if (!target.classList.contains('_slide')) {\n        target.classList.add('_slide');\n        target.hidden = target.hidden ? false : null;\n        target.style.transitionProperty = 'opacity';\n        target.style.transitionDuration = duration + 'ms';\n        target.style.opacity = 0;\n        setTimeout(() => {\n            target.style.opacity = 1;\n        }, 0);\n        setTimeout(() => {\n            target.style.removeProperty('transition-duration');\n            target.style.removeProperty('transition-property');\n            target.style.removeProperty('opacity');\n            target.classList.remove('_slide');\n        }, duration);\n    }\n};\n\nconst _displayFadeToggle = (target, duration = 500) => {\n    if (target.hidden) {\n        return _displayFadeDown(target, duration);\n    } else {\n        return _displayFadeUp(target, duration);\n    }\n}\n\n//# sourceURL=webpack://gulp-builder/./src/js/modules/slide.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/global.js");
/******/ 	
/******/ })()
;